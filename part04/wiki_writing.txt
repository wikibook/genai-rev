위키북스 글쓰기 기본 원칙을 설명하고 해당 원칙과 관련한 예제를 정리했습니다.
예제에서 왼쪽은 나쁜 예이고 오른쪽이 권장되는 표현입니다.


원칙 1. 문장은 간결하게 쓴다.

(예제)
초점을 맞추었다 --> 초점을 맞췄다
정리하여 --> 정리해서, 정리해
실시하였으며 --> 실시했으며
추가되었으면 하는 --> 추가됐으면 하는
정의되어 있지만 --> 정의돼 있지만
이루어지지 않은 --> 이뤄지지 않은
서버이다 --> 서버다
마찬가지이다 --> 마찬가지다
하나이다 --> 하나다
알아보았다 --> 알아봤다
알아보도록 한다 --> 알아보겠다, 알아보자, 알아본다
클릭하여 --> 클릭해
생각해 보아야 한다 --> 생각해봐야 한다
예제이다 --> 예제다
원활한 커뮤니케이션을 할 수 있도록 --> 의사소통이 원활하게

원칙 2. 수동태 표현이나 사역형 표현은 되도록 쓰지 않는다.

(예제)
사람들에 의해 만들어지는 이상 --> 사람이 만드는 이상
작성된다는 건 --> 작성한다는 건
Left 값 또는 right 값이 입력되지 않으면 --> left 값이나 right 값을 입력하지 않으면
픽스처가 작성되지 않았기 --> 픽스처를 작성하지 않았기
실행시키면 --> 실행하면

원칙 3. 가급적 쉬운 표현을 쓴다 

(예제)
변화된다 --> 바뀐다
동일하다 --> 같다
생성한다 --> 만든다

원칙 4. 명사형 표현을 과도하게 쓰지 않는다

(예제)
코드 품질 향상을 위한 --> 코드 품질을 향상시키기 위한
품질 개선 영역 식별 및 의사 결정 판단 근거를 --> 품질을 개선할 영역을 식별하거나 의사 결정에 필요한 근거를
QP 적용 지원 도구 사용 과정에서 발생하는 --> QP 적용 지원 도구를 사용하는 과정에서 발생하는
테스트 코드 작성이 용이해짐 --> 테스트 코드를 작성하기가 쉬워짐
이해가 훨씬 빠를 것이다 --> 훨씬 빨리 이해할 것이다

원칙 5. 불필요한 조사를 뺀다 

(예제)
실행을 한다 --> 실행한다
도입을 했다 --> 도입했다
컴파일이 되지만 --> 컴파일되지만

원칙 6. 쉼표 사용을 가급적 자제한다

(예제)
따라서, --> 따라서
하지만, --> 하지만
그러나, --> 그러나
~하는 대신, --> ~하는 대신
나타나, --> 나타나
때문에, --> 때문에
통합 테스트란, --> 통합 테스트란

원칙 7. 영어 표현은 가급적 한글 표현으로 대체한다

(예제)
오버헤드 --> 부담
퀄리티 --> 품질
커뮤니케이션 --> 의사소통
디폴트 --> 기본값
리턴 --> 반환
파라미터 --> 매개변수

원칙 8. 자주 쓰는 표현은 가급적 한글로 표기한다

(예제)
Java --> 자바
ActionScript --> 액션스크립트
JavaScript --> 자바스크립트
Windows --> 윈도우

원칙 9. 영문 병기는 처음 나올 때만 쓴다
영문 병기가 필요한 용어나 표현은 처음 나올 때만 괄호를 이용해 영문 병기하고 나머지 부분에서는 한글만 씁니다.

(예제)
페이스북(Facebook)


원칙 10. 표현을 일관되게 쓴다
의미는 같지만 형태만 다른 표현은 본문 내에서 일관된 표현으로 씁니다.


원칙 11. '-의' 조사는 가급적 사용하지 않는다

(예제)
좋은 품질의 제품 --> 품질 좋은 제품
검증의 수단으로서 --> 검증 수단으로
소규모의 프로젝트에서나 --> 소규모 프로젝트에서나

원칙 12. 정확히 복수형임을 나타낼 필요가 없다면 가급적 ‘- 들’을 쓰지 않는다.

(예제)
ex) 하위 클래스의 메서드들은 --> 하위 클래스의 메서드는
   
원칙 13. '경우', '경우에는' 표현은 가능하면 사용하지 않는다

(예제)
적을 경우 --> 적다면
일부 조직의 경우에는 자발적으로 --> 일부 조직에서는 자발적으로
수행해야 하는 경우에는 자동으로 --> 수행해야 할 때는 자동으로

원칙 14. '-위해' 라는 표현은 가능하면 사용하지 않는다

(예제)
적용하기 위해 필요한 기술 환경 구축 --> 적용하는 데 필요한 기술 환경 구축
개선되었는지 판단하기 위해서 --> 개선됐는지 판단하려면
검증범위를 넓히기 위해 활용할 --> 검증 범위를 넓히는 데 활용할

원칙 15. '및' 이라는 표현은 가능하면 사용하지 않는다

(예제)
A 소개 및 도입 목적을 --> A를 소개하고 도입 목적을

원칙 16. '때문에' 라는 표현은 가능하면 사용하지 않는다

(예제)
특성이 다르기 때문에 --> 특성이 다르므로, 특성이 달라

원칙 17. '-도록' 이라는 표현은 가능하면 사용하지 않는다

(예제)
역량을 갖출 수 있도록 하였다 --> 역량을 갖추게 했다, 역량을 갖출 수 있게 했다, 역량을 갖출 수 있게끔 했다
알아보도록 하자 --> 알아보자
이야기하도록 하겠다 --> 이야기하겠다
  
원칙 18. 의미가 모호한 ‘제공하다’는 표현은 자주 사용하지 않는다

(예제)
기술 교육을 제공하여 --> 기술 교육을 실시해 
컨설팅을 제공했다 --> 컨설팅했다

원칙 19. 추측성 ‘~것이다’는 자주 사용하지 않는다

(예제)
내재화하기 어려울 것이다. --> 내재화하기 어렵다.

원칙 20. 군더더기인 '-서' 라는 표현은 사용하지 않는다 

(예제)
되어서 --> 되어
하여서 --> 하여
~하는 데 있어서 --> ~하는 데 있어

원칙 21. 의미상 중복되는 표현은 사용하지 않는다

(예제)
기존 레거시 코드 --> 레거시 코드

원칙 22. '~되다'라는 표현은 가능하면 사용하지 않는다

(예제)
가능하게 되었다 --> 가능해졌다
기여하게 된다 --> 기여한다
높아지게 된다 --> 높아진다
차지하게 될 것이다 --> 차지할 것이다

원칙 23. 영어의 have에서 비롯된 ‘가지다’라는 표현은 사용하지 않는다

(예제)
유사한 구조를 가지고 있지만 --> 구조가 유사하지만 
경향을 갖는다 --> 경향이 있다

원칙 24. '~이루어지다' 라는 표현은 가능한 다른 표현으로 바꿔야 한다.

(예제)
부분에 변경이 이루어져야 한다 --> 부분을 변경해야 한다

원칙 25. '~요구되다' 라는 표현은 사용하지 않는다

(예제)
개선이 요구된다 --> 개선이 필요하다, 개선할 필요가 있다, 개선해야 한다.

원칙 26. 불필요한 과거형 표현은 현재형으로 바꾼다

(예제)
경험했던 --> 경험한
처음에 했던 --> 처음에 한 
해봤던 --> 해본
설명했던 --> 설명한

원칙 27. 영어의 for에서 비롯된 ‘~대해/~대한’이라는 표현은 가능한 사용하지 않는다

(예제)
넥타이 매는 방법에 대해 설명할 때 --> 넥타이 매는 방법을 설명할 때 
사칙 연산 기능에 대한 일부 설명을 발췌하였다 --> 사칙 연산 기능을 설명한 내용 중 일부를 발췌한 것이다
null에 대한 검사를 --> null 검사를, null 값 검사를

원칙 28. '~있다' 라는 표현은 가능하면 사용하지 않는다

(예제)
관계를 맺고 있다 --> 관계를 맺는다 
맡고 있다 --> 맡는다

원칙 29. 폴더, 디렉터리, 컬렉션처럼 뭔가를 담는 것이 주 용도인 대상에 ‘안에’라는 표현을 덧붙이지 않는다

(예제)

폴더 안에 파일을 저장한다 --> 폴더에 파일을 저장한다
디렉터리 안에 파일을 추가한다 --> 디렉터리에 파일을 추가한다.


원칙 30. '사용'/'이용' 표현은 ‘쓰다’ 같은 표현을 쓰거나 ‘활용’과 같은 표현으로 대체한다. 또는 경우에 따라 아예 없애 버려도 무난하다.

(예제)
Null 객체가 사용될 수 있다 --> Null 객체를 활용할 수 있다
Null 객체를 이용해서 --> Null 객체로
  
원칙 31. '각각의' 라는 표현은 ‘각’, ‘각기’로 고쳐 쓴다.

원칙 32. 서로 다른(each other)/다른(other) 등의 표현은 ‘그 외’, ‘그 밖의’, ‘기타’, ‘~ 등’으로 고쳐쓴다.
